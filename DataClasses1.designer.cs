#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.269
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace EbayFactory
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="EbayFactory")]
	public partial class DataClasses1DataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InserttblCategory(tblCategory instance);
    partial void UpdatetblCategory(tblCategory instance);
    partial void DeletetblCategory(tblCategory instance);
    partial void InserttblItem(tblItem instance);
    partial void UpdatetblItem(tblItem instance);
    partial void DeletetblItem(tblItem instance);
    partial void Insertcat_count(cat_count instance);
    partial void Updatecat_count(cat_count instance);
    partial void Deletecat_count(cat_count instance);
    #endregion
		
		public DataClasses1DataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["EbayFactoryConnectionString1"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<tblCategory> tblCategories
		{
			get
			{
				return this.GetTable<tblCategory>();
			}
		}
		
		public System.Data.Linq.Table<tblItem> tblItems
		{
			get
			{
				return this.GetTable<tblItem>();
			}
		}
		
		public System.Data.Linq.Table<cat_count> cat_counts
		{
			get
			{
				return this.GetTable<cat_count>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tblCategories")]
	public partial class tblCategory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _category_id;
		
		private string _category_level;
		
		private string _category_name;
		
		private string _category_parent;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Oncategory_idChanging(string value);
    partial void Oncategory_idChanged();
    partial void Oncategory_levelChanging(string value);
    partial void Oncategory_levelChanged();
    partial void Oncategory_nameChanging(string value);
    partial void Oncategory_nameChanged();
    partial void Oncategory_parentChanging(string value);
    partial void Oncategory_parentChanged();
    #endregion
		
		public tblCategory()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_category_id", DbType="NChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string category_id
		{
			get
			{
				return this._category_id;
			}
			set
			{
				if ((this._category_id != value))
				{
					this.Oncategory_idChanging(value);
					this.SendPropertyChanging();
					this._category_id = value;
					this.SendPropertyChanged("category_id");
					this.Oncategory_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_category_level", DbType="NChar(10)")]
		public string category_level
		{
			get
			{
				return this._category_level;
			}
			set
			{
				if ((this._category_level != value))
				{
					this.Oncategory_levelChanging(value);
					this.SendPropertyChanging();
					this._category_level = value;
					this.SendPropertyChanged("category_level");
					this.Oncategory_levelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_category_name", DbType="NVarChar(50)")]
		public string category_name
		{
			get
			{
				return this._category_name;
			}
			set
			{
				if ((this._category_name != value))
				{
					this.Oncategory_nameChanging(value);
					this.SendPropertyChanging();
					this._category_name = value;
					this.SendPropertyChanged("category_name");
					this.Oncategory_nameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_category_parent", DbType="NChar(10)")]
		public string category_parent
		{
			get
			{
				return this._category_parent;
			}
			set
			{
				if ((this._category_parent != value))
				{
					this.Oncategory_parentChanging(value);
					this.SendPropertyChanging();
					this._category_parent = value;
					this.SendPropertyChanged("category_parent");
					this.Oncategory_parentChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tblItems")]
	public partial class tblItem : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _item_id;
		
		private string _item_title;
		
		private string _item_category;
		
		private string _listing_url;
		
		private string _gallery_url;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onitem_idChanging(string value);
    partial void Onitem_idChanged();
    partial void Onitem_titleChanging(string value);
    partial void Onitem_titleChanged();
    partial void Onitem_categoryChanging(string value);
    partial void Onitem_categoryChanged();
    partial void Onlisting_urlChanging(string value);
    partial void Onlisting_urlChanged();
    partial void Ongallery_urlChanging(string value);
    partial void Ongallery_urlChanged();
    #endregion
		
		public tblItem()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_item_id", DbType="NChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string item_id
		{
			get
			{
				return this._item_id;
			}
			set
			{
				if ((this._item_id != value))
				{
					this.Onitem_idChanging(value);
					this.SendPropertyChanging();
					this._item_id = value;
					this.SendPropertyChanged("item_id");
					this.Onitem_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_item_title", DbType="NVarChar(50)")]
		public string item_title
		{
			get
			{
				return this._item_title;
			}
			set
			{
				if ((this._item_title != value))
				{
					this.Onitem_titleChanging(value);
					this.SendPropertyChanging();
					this._item_title = value;
					this.SendPropertyChanged("item_title");
					this.Onitem_titleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_item_category", DbType="NChar(10)")]
		public string item_category
		{
			get
			{
				return this._item_category;
			}
			set
			{
				if ((this._item_category != value))
				{
					this.Onitem_categoryChanging(value);
					this.SendPropertyChanging();
					this._item_category = value;
					this.SendPropertyChanged("item_category");
					this.Onitem_categoryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_listing_url", DbType="nvarchar(300)")]
		public string listing_url
		{
			get
			{
				return this._listing_url;
			}
			set
			{
				if ((this._listing_url != value))
				{
					this.Onlisting_urlChanging(value);
					this.SendPropertyChanging();
					this._listing_url = value;
					this.SendPropertyChanged("listing_url");
					this.Onlisting_urlChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_gallery_url", DbType="nvarchar(300)")]
		public string gallery_url
		{
			get
			{
				return this._gallery_url;
			}
			set
			{
				if ((this._gallery_url != value))
				{
					this.Ongallery_urlChanging(value);
					this.SendPropertyChanging();
					this._gallery_url = value;
					this.SendPropertyChanged("gallery_url");
					this.Ongallery_urlChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.cat_count")]
	public partial class cat_count : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _category_id;
		
		private System.Nullable<int> _category_count;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Oncategory_idChanging(string value);
    partial void Oncategory_idChanged();
    partial void Oncategory_countChanging(System.Nullable<int> value);
    partial void Oncategory_countChanged();
    #endregion
		
		public cat_count()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_category_id", DbType="NChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string category_id
		{
			get
			{
				return this._category_id;
			}
			set
			{
				if ((this._category_id != value))
				{
					this.Oncategory_idChanging(value);
					this.SendPropertyChanging();
					this._category_id = value;
					this.SendPropertyChanged("category_id");
					this.Oncategory_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_category_count", DbType="Int")]
		public System.Nullable<int> category_count
		{
			get
			{
				return this._category_count;
			}
			set
			{
				if ((this._category_count != value))
				{
					this.Oncategory_countChanging(value);
					this.SendPropertyChanging();
					this._category_count = value;
					this.SendPropertyChanged("category_count");
					this.Oncategory_countChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
